[["index.html", "Wichita Canid Sightings Project Chapter 1 About", " Wichita Canid Sightings Project Neville Taraporevala 2023-03-21 Chapter 1 About This is my final project for Reproducible Data Science 2023. Visit our website to learn more about the Wichita Urban Coyote and Fox Project. "],["building-the-database.html", "Chapter 2 Building the database 2.1 Loading Packages 2.2 Create database 2.3 Creating tables 2.4 Database Diagram", " Chapter 2 Building the database 2.1 Loading Packages First, we call the package DBI. This package is necessary for using SQLite for buildling our database in R. library(DBI) 2.2 Create database Next, we create our database sighting_db and establish a connection to it in the same line. sighting_db &lt;- dbConnect(RSQLite::SQLite(), &quot;sighting_db.db&quot;) 2.3 Creating tables Our next step is to create the tables that we want to include in our database. These include a table for species, zip code, and date attributes and our table of sightings. 2.3.1 Species table We will start with our species table. Our species table includes our species of interest, coyote, red fox, and bobcat, as well as a category for other. For each, we have their family, genus, and species. “Other” will have no such identifying information, but later may include grey foxes, skunks, raccoons, possums, etc. Species is our primary key and will be referenced as a foreign key in our sightings table. dbExecute(sighting_db, &quot;CREATE TABLE species ( species varchar(10) PRIMARY KEY CHECK (species IN (&#39;Coyote&#39;, &#39;Red Fox&#39;, &#39;Bobcat&#39;, &#39;Other&#39;)), species_latin varchar(10) CHECK (species_latin IN (&#39;latrans&#39;, &#39;vulpes&#39;, &#39;rufus&#39;)), genus_latin varchar(10) CHECK (genus_latin IN (&#39;Canis&#39;, &#39;Vulpes&#39;, &#39;Lynx&#39;)), family_latin varchar(10) CHECK (family_latin IN (&#39;Canidae&#39;, &#39;Felidae&#39;)) );&quot;) 2.3.2 Zip code table Next we will build our zip code table. This will relate to the home zip code that people fill out in the survey. We hope this allows us to better understand where reports are coming from and locations we may need to target to increase reports. Each zip code will have an average annual income, average building density, and proportion of population that is white. dbExecute(sighting_db, &quot;CREATE TABLE zip_code ( zip_code integer(5) PRIMARY KEY, avg_income double, building_density double, proportion_white double );&quot;) 2.3.3 Date table Our third table will include attributes about when the sighting was recorded. The date along with the temperature and precipitation in Wichita (ICT) will be recorded. dbExecute(sighting_db, &quot;CREATE TABLE date ( date text PRIMARY KEY, temp_in_ICT float, precip_in_ICT float );&quot;) 2.3.4 Sighting table Our last is our most important table. This is the table that will be given from the data that will be collected from the sighting reporting form. dbExecute(sighting_db, &quot;CREATE TABLE sighting_reports ( sighting_id integer PRIMARY KEY AUTOINCREMENT, species varchar(10) CHECK (species IN (&#39;Coyote&#39;, &#39;Red Fox&#39;, &#39;Bobcat&#39;, &#39;Other&#39;)), utm_x float, utm_y float, date text, time text, action varchar(10), habitat varchar(10), count varchar(10), offspring varchar(100), feeling varchar(100), zip_code integer(5), FOREIGN KEY (date) REFERENCES date(date) FOREIGN KEY (species) REFERENCES species(species) FOREIGN KEY (zip_code) REFERENCES zip_code(zip_code) );&quot;) 2.4 Database Diagram Here is what our database looks like in diagram form. Figure 2.1: Diagram of Tables in Sightings Database "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
